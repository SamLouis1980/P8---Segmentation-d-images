from fastapi import FastAPI, File, UploadFile, Response, Query
import numpy as np
import cv2
from tensorflow.keras.models import load_model
from model_loader import load_model, MODEL_PATHS, MODEL_INPUT_SIZES
from io import BytesIO
from PIL import Image
import uvicorn
import os
import logging

# Configuration du logging pour afficher les logs DEBUG
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler()  # Affichage dans la console
    ]
)

logging.debug("Logging DEBUG activ√© !")

os.environ["CUDA_VISIBLE_DEVICES"] = "-1"

app = FastAPI()

# Liste des mod√®les disponibles
AVAILABLE_MODELS = list(MODEL_PATHS.keys())

# Palette officielle Cityscapes
CLASS_COLORS = {
    0: (0, 0, 0),        # Void
    1: (128, 64, 128),   # Flat
    2: (70, 70, 70),     # Construction
    3: (153, 153, 153),  # Object
    4: (107, 142, 35),   # Nature
    5: (70, 130, 180),   # Sky
    6: (220, 20, 60),    # Human
    7: (0, 0, 142)       # Vehicle
}

def colorize(mask):
    """Applique des couleurs aux classes segment√©es selon la palette Cityscapes."""
    color_mask = np.zeros((*mask.shape, 3), dtype=np.uint8)
    for class_id, color in CLASS_COLORS.items():
        color_mask[mask == class_id] = color
    return color_mask

@app.post("/predict/")
async def predict(file: UploadFile = File(...), model_name: str = Query("unet_mini", enum=AVAILABLE_MODELS)):
    """Endpoint qui prend une image en entr√©e, applique la segmentation et retourne le masque coloris√©."""

    logging.debug(f"üì• Requ√™te re√ßue avec mod√®le : {model_name}")

    # V√©rification du format et de la taille
    if file.content_type not in ["image/jpeg", "image/png"]:
        logging.error("‚ùå Format non support√© re√ßu !")
        return {"error": "Format non support√©. Utilisez JPEG ou PNG."}
    
    if file.size > 10 * 1024 * 1024:
        logging.error("‚ùå Image trop grande (>10MB) re√ßue !")
        return {"error": "Image trop grande. Taille max: 10MB."}

    # Lire l'image re√ßue
    try:
        image_bytes = await file.read()
        if len(image_bytes) == 0:
            logging.error("‚ùå Fichier image vide re√ßu !")
            return {"error": "Fichier image vide"}
        
        image = Image.open(BytesIO(image_bytes)).convert("RGB")
        logging.debug(f"üìè Taille originale de l'image : {image.size}")

    except Exception as e:
        logging.error(f"‚ùå Impossible de lire l'image re√ßue : {e}")
        return {"error": "Format d'image non support√©"}

    # V√©rification du mod√®le s√©lectionn√©
    if model_name not in MODEL_INPUT_SIZES:
        logging.error(f"‚ùå Mod√®le inconnu {model_name} demand√© !")
        return {"error": f"Mod√®le inconnu {model_name}. Mod√®les disponibles : {AVAILABLE_MODELS}"}

    input_size = MODEL_INPUT_SIZES[model_name]  # Taille correcte du mod√®le
    logging.debug(f"üîß Mod√®le {model_name} s√©lectionn√© - Taille attendue : {input_size}")

    # Redimensionner l'image
    image = image.resize(input_size, Image.BILINEAR)
    logging.debug(f"üìè Taille apr√®s redimensionnement : {image.size}")

    # Pr√©parer l'image pour le mod√®le
    image_array = np.array(image) / 255.0  # Normalisation
    image_array = np.expand_dims(image_array, axis=0)  # Ajouter une dimension batch
    logging.debug(f"üìä Shape du tenseur avant pr√©diction : {image_array.shape}")

    # Charger le mod√®le
    logging.info(f"üì° Chargement du mod√®le {model_name}...")
    model = load_model(model_name)

    # V√©rification de la taille d'entr√©e du mod√®le
    if image_array.shape[1:3] != input_size:
        logging.error(f"‚ùå ERREUR : Taille incorrecte {image_array.shape[1:3]}, attendu {input_size}")
        return {"error": f"Taille incorrecte : {image_array.shape[1:3]} au lieu de {input_size}"}

    # Pr√©diction
    logging.info("üß† Ex√©cution de la pr√©diction...")
    prediction = model.predict(image_array)
    logging.debug(f"‚úÖ Pr√©diction termin√©e. Shape sortie : {prediction.shape}")

    # Extraction du masque et application de la palette
    mask = np.argmax(prediction[0], axis=-1)
    color_mask = colorize(mask)

    # V√©rification du masque g√©n√©r√©
    if color_mask is None or color_mask.size == 0:
        logging.error("üö® Le masque g√©n√©r√© est vide !")
        return {"error": "Le masque g√©n√©r√© est vide"}

    # Convertir en image PNG
    success, buffer = cv2.imencode(".png", color_mask)

    if not success or buffer is None or len(buffer.tobytes()) == 0:
        logging.error("üö® √âchec de l'encodage du masque en PNG !")
        return {"error": "Erreur lors de l'encodage du masque pr√©dictif"}

    logging.info(f"üì§ Masque g√©n√©r√© avec succ√®s ({len(buffer.tobytes())} bytes), envoi au client.")
    return Response(buffer.tobytes(), media_type="image/png")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8080)
